// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package bn448

import (
	"math/big"
)

func bigFromBase10(s string) *big.Int {
	n, _ := new(big.Int).SetString(s, 10)
	return n
}

const numBytes = 448 / 8

var one = big.NewInt(1)

// u is the BN parameter that determines the prime: 1868033³.
var u = bigFromBase10("1910986621940954212840033034977453")

// p is a prime over which we form a basic field: 36u⁴+36u³+24u³+6u+1.
var p = bigFromBase10("480101527506357025042552903742957269726082143449108108204315883833545084968513181915934165384416009875094729311417006277304098666258623")

// Order is the number of elements in both G₁ and G₂: 36u⁴+36u³+18u³+6u+1.
var Order = bigFromBase10("480101527506357025042552903742957269726082143449108108204315883833523173749297758119142322340915562185320845489713301260652177356055369")

// xiToPMinus1Over6 is ξ^((p-1)/6) where ξ = i+3.
var xiToPMinus1Over6 = &gfP2{bigFromBase10("179214204054206629265832485170237631595545621828633928182286173833132034444189934896601442057722786893256673067435325070935571663740600"), bigFromBase10("35291046790442362864292603718734983167376361261004210596868662380710082615786051333129308154333164266952947305090076379795839171020338")}

// xiToPMinus1Over3 is ξ^((p-1)/3) where ξ = i+3.
var xiToPMinus1Over3 = &gfP2{bigFromBase10("436473872288265857870277070994893503707903987150810513866135195438011823728939764578625559977309393894141877857081443490858834702406705"), bigFromBase10("229981309887558880339363207448435681024618205349319858019871642749472080921681952055383951364389622097907857293577055770492367960038775")}

// xiToPMinus1Over2 is ξ^((p-1)/2) where ξ = i+3.
var xiToPMinus1Over2 = &gfP2{bigFromBase10("48275361872377522518965716915800379170787513416753591211069283871643357168944147790016168392561689804094289728783564826732465423328120"), bigFromBase10("16091787290792507506321905638600126390262504472251197070356427957214452389648049263338722797520563268031429909594521608910821807776040")}

// xiToPSquaredMinus1Over3 is ξ^((p²-1)/3) where ξ = i+3.
var xiToPSquaredMinus1Over3 = bigFromBase10("480101527506357025042552903742957144109941770177768477856466898287238560747894535763256093699157899203223954458875743472623893209155596")

// xiTo2PSquaredMinus2Over3 is ξ^((2p²-2)/3) where ξ = i+3 (a cubic root of unity, mod p).
var xiTo2PSquaredMinus2Over3 = bigFromBase10("125616140373271339630347848985546306524220618646152678071685258110671870774852541262804680205457103026")

// xiToPSquaredMinus1Over6 is ξ^((1p²-1)/6) where ξ = i+3 (a cubic root of -1, mod p).
var xiToPSquaredMinus1Over6 = bigFromBase10("480101527506357025042552903742957144109941770177768477856466898287238560747894535763256093699157899203223954458875743472623893209155597")

// xiTo2PMinus2Over3 is ξ^((2p-2)/3) where ξ = i+3.
var xiTo2PMinus2Over3 = &gfP2{bigFromBase10("220675493229304815976326084229006925624788842593427879652258297500418453150502961370890858110030279771535704744846875363887805226621936"), bigFromBase10("425955377730245196578414730327917766128077057194239351513916219159570933123482319283473436444070431505861607866941236365714202871200292")}

var curveB = new(big.Int).SetInt64(3)

// curveGen is the generator of G₁.
var curveGen = &curvePoint{
	new(big.Int).SetInt64(1),
	new(big.Int).SetInt64(-2),
	new(big.Int).SetInt64(1),
	new(big.Int).SetInt64(1),
}

var twistB = &gfP2{bigFromBase10("48010152750635702504255290374295726972608214344910810820431588383354508496851318191593416538441600987509472931141700627730409866625862"), bigFromBase10("336071069254449917529787032620070088808257500414375675743021118683481559477959227341153915769091206912566310517991904394112869066381037")}

// twistGen is the generator of group G₂.
var twistGen = &twistPoint{
	&gfP2{bigFromBase10("24231135095692171665423092462027591461315644426983853385285393423907507507680068251632737073127867780677570683176025617514771120248116"), bigFromBase10("18776891464521752879617172489896203770874658835472076049759428239691445151659603812946544134522940624613105391929761512682261461100809")},
	&gfP2{bigFromBase10("445591791484558348409448588690565413167054148699694384087113532873110602329493532573759867081327444993733864957104832190514638995520308"), bigFromBase10("142382832012510272634207055173548583926214212153568237030236023615516004926093275505887315364382367353666918537710074457599531819419239")},
	&gfP2{
		bigFromBase10("0"),
		bigFromBase10("1"),
	},
	&gfP2{
		bigFromBase10("0"),
		bigFromBase10("1"),
	},
}

// sixuPlus2NAF is 6u+2 in non-adjacent form.
var sixuPlus2NAF = []int8{0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, -1, 0, 0, 1, 0, -1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, -1, 0, -1, 0, 0, 1, 0, 0, -1, 0, -1, 0, 1, 0, -1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, -1, 0, 1, 0, 0, 1}
